/**Inheritence ,override n super constructor**/


class Animal {
  final int age;

  Animal({this.age});

  void sleep() => print('sleep');
}

class Dog extends Animal {
  Dog({int age}) : super(age: age);

  void bark() => print('bark');
  @override
  void sleep() {
    super.sleep();
    print('sleep some more');
  }
}

class Cow extends Animal {
  Cow({int age}) : super(age: age);

  void moo() => print('moo');
}

class CleaverDog extends Dog {
  CleaverDog({int age}) : super(age: age);

  void catchBall() => print('Catch Ball');
}

void main() {
  final animal = Animal(age: 10);
  //animal.sleep();
  final dog = Dog(age: 10);
  dog.sleep();
}

/**find area n perimeter**/

import 'dart:math';

abstract class Shape {
  double get area;
  double get perimeter;

  void printValues() {
    print('area: $area, perimeter: $perimeter');
  }
}

class Square extends Shape {
  Square(this.side);
  final double side;

  @override
  double get area => side * side;

  @override
  double get perimeter => 4 * side;
}

class Circle extends Shape {
  Circle(this.radius);
  final double radius;

  @override
  double get area => pi * radius * radius;

  @override
  double get perimeter => 2 * pi * radius;
}

void main() {
  final shapes = [
    Square(3),
    Circle(14),
  ];
  shapes.forEach((shape) => shape.printValues());
}

/**Factory Constructor**/

import 'dart:math';

abstract class Shape {
  double get area;
  const Shape();

  factory Shape.fromJson(Map<String, Object> json) {
    final type = json['type'];
    switch (type) {
      case 'square':
        final side = json['side'];
        if (side is double) {
          return Square(side);
        }
        throw UnsupportedError('invalid or missing side property');
      case 'circle':
        final radius = json['radius'];
        if (radius is double) {
          return Circle(radius);
        }
        throw UnsupportedError('invalid or missing radius property');
      default:
        throw UnimplementedError('shape $type not recognized');
    }
  }
}

class Square extends Shape {
  const Square(this.side);
  final double side;

  @override
  double get area => side * side;
}

class Circle extends Shape {
  const Circle(this.radius);
  final double radius;

  @override
  double get area => pi * radius * radius;
}

void printArea(Shape shape) {
  print(shape.area);
}

void main() {
  final shapesJson = [
    {
      'type': 'square',
      'side': 10.0,
    },
    {
      'type': 'circle',
      'radius': 5.0,
    },
    {
      'type': 'triangle',
    },
  ];
  final shapes = shapesJson.map((shapeJson) => Shape.fromJson(shapeJson));
  shapes.forEach(printArea);
}

/**Factory Constructor Example**/

class Person {
  Person({required this.name, required this.age});
  final String name;
  final int age;
  factory Person.fromJson(Map<String, Object> json) {
    final name = json['name'];
    final age = json['age'];
    if (name is String && age is int) {
      return Person(name: name, age: age);
    }
    throw StateError('Could not read name or age');
  }

  Map<String, Object> toJson() => {
        'name': name,
        'age': age,
      };
}

void main() {
  final person = Person.fromJson({
    'name': 'Andrea',
    'age': 36,
  });
  final json = person.toJson();
  print(json);
}

/**Copying object with copyWith**/

class Credentials {
  const Credentials({this.email = '', this.password = ''});
  final String email;
  final String password;

  Credentials copyWith({
    String? email,
    String? password,
  }) {
    return Credentials(
      email: email ?? this.email,
      password: password ?? this.password,
    );
  }

  @override
  String toString() => 'Credentials($email, $password)';
}

void main() {
  const credentials = Credentials();
 // credentials.email = 'me@example.com';
  final updated1 = credentials.copyWith(email: 'me@example.com');
  print(updated1);
  final updated2 = updated1.copyWith(password: 'too-easy');
  print(updated2);
}

/**Cascade Operator in dart (..)**/

import 'dart:math';

class ClosedPath2 {
  const ClosedPath2(this.points);
  final List<Point> points;
}

class ClosedPath {
  List<Point> _points = [];

  void moveTo(Point point) {
    _points = [point];
  }

  void lineTo(Point point) {
    _points.add(point);
  }
}

void main() {
  final path = ClosedPath();
    path..moveTo(Point(0, 0))
    ..lineTo(Point(2, 0))
    ..lineTo(Point(2, 2))
    ..lineTo(Point(0, 2))
    ..lineTo(Point(0, 0));
print(path._points);
}
/**extenstion in dart**/

extension NumberParsing on String {
  int? toIntOrNull() => int.tryParse(this);
}

void main() {
int.tryParse('123');
  '123'.toIntOrNull();
  print('456'.toIntOrNull());
  
}

/**Asssertion **/

class PositiveInt {
  const PositiveInt(this.value)
      : assert(value >= 0, 'Value cannot be negative');
  final int value;
}

void signIn(String email, String password) {
  assert(email.isNotEmpty);
  assert(password.isNotEmpty);
}



void main() {  
//   const list = [1, 2, 3];
//    print(list[4]);
  signIn('shakti@weww', '');
//   const invalidAge = PositiveInt(-1);
//   print(invalidAge);
}
