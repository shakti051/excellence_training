//File upload

  String _filePath;
  File _docFile;
  bool _apiHit = false;
  var finalUrl;
  
  
Future getFile() async {
    FilePickerResult result = await FilePicker.platform.pickFiles();
    setState(() {
      if (result != null) {
        _docFile = File(result.files.single.path);
        _filePath = _docFile.path;
        //print("file path>>>>>>>>>>>>>>>>>>>>>>>>>>>>"+file.path);
      }
    });
    try {
      var val = await apiImage.uploadImage(
        file: _docFile,
      );
      finalUrl = val.body;
      setState(() {
        _apiHit = true;
      });
      print(finalUrl);
      Fluttertoast.showToast(msg: 'uploaded', toastLength: Toast.LENGTH_LONG);
    } catch (e) {
      print("url error" + e);
    }
  }

// image upload

Future getImage() async {
    final image = await picker.getImage(source: ImageSource.gallery);
    setState(() {
      if (image != null) {
        uploading = false;
        _image = File(image.path);
      }
    });
    try {
      var val = await apiImage.uploadImage(
        file: _image,
      );
      //  print('value ' + val.body
      finalUrl = val.body;
      setState(() {
        _apiHit = true;
      });
      print(finalUrl);
      Fluttertoast.showToast(msg: 'uploaded', toastLength: Toast.LENGTH_LONG);
    } catch (e) {
      print('url error $e');
    }
  }


// API code 

import 'dart:async';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:path/path.dart';
import 'package:async/async.dart';
import 'package:mime_type/mime_type.dart';
import 'package:http_parser/http_parser.dart';

class UploadImageApi {
  Future<http.Response> uploadImage(
      { File file}) async {
    final apiUrl = 'https://eduarno1.herokuapp.com/upload_files_content';
    Uri uri = Uri.parse(apiUrl);
    var fileStream =
        new http.ByteStream(DelegatingStream.typed(file.openRead()));
    var length = await file.length();
    var request = new http.MultipartRequest("POST", uri);
    String mimeType = mime(basename(file.path));
    String mimee = mimeType.split('/')[0];
    String type = mimeType.split('/')[1];
    var multipartFile = new http.MultipartFile('files', fileStream, length,
        filename: basename(file.path), contentType: MediaType(mimee, type));
    request.files.add(multipartFile);
    Map<String, String> headers = {
      'Content-Type': 'application/json; charset=UTF-8',
    };

    request.fields.addAll(headers);
    var response = await request.send();
      var finalResponse = await http.Response.fromStream(response);
     // print("final>>>>>>>>>>>>>>>>>>>>>>>>>"+finalResponse.body);
      return finalResponse;
    // return await request.send().then((result) async {
    //   print(">>>>>>>>>>>>>>>>>>>>>>>>>>>"+result.toString());
    //   return await http.Response.fromStream(result);
    // });
  }
}



